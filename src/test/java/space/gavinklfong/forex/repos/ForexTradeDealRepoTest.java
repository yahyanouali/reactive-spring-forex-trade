package space.gavinklfong.forex.repos;

import static org.springframework.data.relational.core.query.Criteria.where;
import static org.springframework.data.relational.core.query.Query.query;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.r2dbc.DataR2dbcTest;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Hooks;
import reactor.test.StepVerifier;
import space.gavinklfong.forex.models.ForexTradeDeal;

@Slf4j
@DataR2dbcTest
@Tag("UnitTest")
public class ForexTradeDealRepoTest {
	    
	@Autowired
	private R2dbcEntityTemplate r2dbcTemplate; 
	
	@Autowired
	private ForexTradeDealRepo tradeDealRepo;
	
	@BeforeEach
	void beforeEach() {
		Hooks.onOperatorDebug();

		// drop and create tables prior to the execution of each test case
		List<String> customerStmts = Arrays.asList(
				"drop table if exists customer",
				"create table customer (id bigint generated by default as identity, name varchar(255), tier integer, primary key (id))",
				
				"drop table if exists forex_rate_booking",
				"create table forex_rate_booking (id bigint generated by default as identity, base_currency varchar(255), base_currency_amount decimal(19,2), booking_ref varchar(255), counter_currency varchar(255), expiry_time timestamp, rate double, timestamp timestamp, customer_id bigint, trade_action varchar(255), primary key (id))",
				
				"drop table if exists forex_trade_deal",
				"create table forex_trade_deal (id bigint generated by default as identity, base_currency varchar(255), base_currency_amount decimal(19,2), counter_currency varchar(255), deal_ref varchar(255), rate double, timestamp timestamp, customer_id bigint, trade_action varchar(255), primary key (id))"
				);

		customerStmts.forEach(s -> 
			r2dbcTemplate.getDatabaseClient()
			.sql(s)
			.fetch()
			.rowsUpdated()
			.as(StepVerifier::create)
			.expectNextCount(1)
			.verifyComplete()
		);		
		
	}
	
	/**
	 * Verify the behaviour for customer without trade deal record
	 * 
	 */
	@Test
	void findByCustomerId_withRecords() {

		// insert test data		
		ForexTradeDeal deal1 = ForexTradeDeal.builder()
				.id(1l).dealRef("DEAL-REF-01")
				.timestamp(LocalDateTime.now())
				.baseCurrency("GBP").counterCurrency("USD")
				.rate(1.25d).baseCurrencyAmount(new BigDecimal(1000)).customerId(2l)
				.build();

		ForexTradeDeal deal2 = ForexTradeDeal.builder()
				.id(2l).dealRef("DEAL-REF-02")
				.timestamp(LocalDateTime.now())
				.baseCurrency("GBP").counterCurrency("CAD")
				.rate(1.5d).baseCurrencyAmount(new BigDecimal(5000)).customerId(2l)
				.build();						
			
		List<ForexTradeDeal> deals = Arrays.asList(deal1, deal2);
		deals.forEach(d -> 
			r2dbcTemplate.insert(d)
			.as(StepVerifier::create)
			.expectNextCount(1)
			.verifyComplete()
		);
		
		// assert repos method
		tradeDealRepo.findByCustomerId(2l)
		.as(StepVerifier::create)
		.expectNextMatches(t -> matchAnyOneRecord(deals, t))
		.expectNextMatches(t -> matchAnyOneRecord(deals, t))
		.verifyComplete();
		
	}	
	
	private boolean matchAnyOneRecord(List<ForexTradeDeal> deals, ForexTradeDeal deal) {
		
		long matchCount = deals.stream()
		.filter(d -> d.getId() == deal.getId() 
				&& d.getDealRef().contentEquals(deal.getDealRef()))
		.count();
		
		return (matchCount == 1)? true : false;
		
	}
	
	
	/**
	 * Verify the behaviour for customer with no trade deal record
	 * 
	 */
	@Test
	void findByCustomerId_NoRecord() {

		tradeDealRepo.findByCustomerId(1l)
		.as(StepVerifier::create)
		.expectComplete()
		.verify();				
		
	}
	
	@Test
	void testSave() {
				
		UUID uuid = UUID.randomUUID();		
		ForexTradeDeal deal = new ForexTradeDeal();
		deal.setBaseCurrency("GBP");
		deal.setCounterCurrency("USD");
		deal.setBaseCurrencyAmount(new BigDecimal(15000));
		deal.setTimestamp(LocalDateTime.now());
		deal.setRate(Double.valueOf(2.25));
		deal.setDealRef(uuid.toString());
		deal.setCustomerId(1l);
		
		// test save method
		tradeDealRepo.save(deal)
		.as(StepVerifier::create)
		.expectNextMatches(i -> i.getId() != null)
		.verifyComplete();
				
		// verify inserted record
		r2dbcTemplate.select(ForexTradeDeal.class)
		.matching(query(where("deal_ref").is(uuid.toString())))
		.all()
		.as(StepVerifier::create)
		.expectNextMatches(r -> 
			r.getBaseCurrency().equals(deal.getBaseCurrency())
			&& r.getCounterCurrency().equals(deal.getCounterCurrency())
			&& r.getDealRef().contentEquals(deal.getDealRef())
			&& r.getCustomerId() == deal.getCustomerId()			
			&& r.getRate().compareTo(deal.getRate()) == 0
		)
		.verifyComplete();				
				
	}
	
	
}
