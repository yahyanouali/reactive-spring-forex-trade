package space.gavinklfong.forex.repos;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.r2dbc.DataR2dbcTest;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import static org.springframework.data.relational.core.query.Criteria.where;
import static org.springframework.data.relational.core.query.Query.query;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Hooks;
import reactor.test.StepVerifier;
import space.gavinklfong.forex.dto.TradeAction;
import space.gavinklfong.forex.models.ForexRateBooking;


@Slf4j
@DataR2dbcTest
@Tag("UnitTest")
public class ForexRateBookingRepoTest {

	@Autowired
	private R2dbcEntityTemplate r2dbcTemplate; 		
    
	@Autowired
	private ForexRateBookingRepo rateBookingRepo;
	
	@BeforeEach
	public void setUp() {
		
		Hooks.onOperatorDebug();

		// drop and create tables prior to the execution of each test case
		List<String> customerStmts = Arrays.asList(
				"drop table if exists customer",
				"create table customer (id bigint generated by default as identity, name varchar(255), tier integer, primary key (id))",
				
				"drop table if exists forex_rate_booking",
				"create table forex_rate_booking (id bigint generated by default as identity, base_currency varchar(255), base_currency_amount decimal(19,2), booking_ref varchar(255), counter_currency varchar(255), expiry_time timestamp, rate double, timestamp timestamp, customer_id bigint, trade_action varchar(255), primary key (id))",
				
				"drop table if exists forex_trade_deal",
				"create table forex_trade_deal (id bigint generated by default as identity, base_currency varchar(255), base_currency_amount decimal(19,2), counter_currency varchar(255), deal_ref varchar(255), rate double, timestamp timestamp, customer_id bigint, primary key (id))"
				);

		customerStmts.forEach(s -> 
			r2dbcTemplate.getDatabaseClient()
			.sql(s)
			.fetch()
			.rowsUpdated()
			.as(StepVerifier::create)
			.expectNextCount(1)
			.verifyComplete()
		);
	}
	
	@DisplayName("save rate booking")
	@Test
	void testSave() {
				
		UUID uuid = UUID.randomUUID();		
		ForexRateBooking rate = new ForexRateBooking();
		rate.setBaseCurrency("GBP");
		rate.setCounterCurrency("USD");
		rate.setTimestamp(LocalDateTime.now());
		rate.setRate(Double.valueOf(2.25));
		rate.setExpiryTime(LocalDateTime.now().plusMinutes(10));
		rate.setBookingRef(uuid.toString());
		rate.setCustomerId(1l);
		
		// test save method
		rateBookingRepo.save(rate)
		.as(StepVerifier::create)
		.expectNextMatches(i -> i.getId() != null)
		.verifyComplete();
				
		// verify inserted record
		r2dbcTemplate.select(ForexRateBooking.class)
		.matching(query(where("booking_ref").is(uuid.toString())))
		.all()
		.as(StepVerifier::create)
		.expectNextMatches(r -> 
			r.getBaseCurrency().equals(rate.getBaseCurrency())
			&& r.getCounterCurrency().equals(rate.getCounterCurrency())
			&& r.getBookingRef().contentEquals(rate.getBookingRef())
			&& r.getCustomerId() == rate.getCustomerId()			
			&& r.getRate().compareTo(rate.getRate()) == 0
		)
		.verifyComplete();				
				
	}
	
	@DisplayName("find all rate booking")
	@Test
	void testFindAll() {
		
		// insert test data
		ForexRateBooking bookingOriginal = new ForexRateBooking();
		bookingOriginal.setBaseCurrency("GBP");
		bookingOriginal.setCounterCurrency("USD");
		bookingOriginal.setTimestamp(LocalDateTime.now());
		bookingOriginal.setRate(Double.valueOf(2.25));
		bookingOriginal.setExpiryTime(LocalDateTime.now().plusMinutes(10));
		bookingOriginal.setBookingRef(UUID.randomUUID().toString());
		
		r2dbcTemplate.insert(ForexRateBooking.class)
		.using(bookingOriginal)
		.as(StepVerifier::create)
		.expectNextCount(1)
		.verifyComplete();
		
		bookingOriginal.setId(null);
		bookingOriginal.setCounterCurrency("CAD");
		bookingOriginal.setRate(1.3);
		bookingOriginal.setBookingRef(UUID.randomUUID().toString());
		r2dbcTemplate.insert(ForexRateBooking.class)
		.using(bookingOriginal)
		.as(StepVerifier::create)
		.expectNextCount(1)
		.verifyComplete();
		
		
		// verify finalAll()
		rateBookingRepo.findAll()
		.collectList()
		.map(c -> c.size())
		.as(StepVerifier::create)
		.expectNextMatches(c -> c == 2)
		.verifyComplete();
		
	}	
	
	@DisplayName("find by booking ref")
	@Test
	void findByBookingRef_withRecord() {
				
		// insert test data
		ForexRateBooking booking = new ForexRateBooking();
		booking.setTimestamp(LocalDateTime.parse("2021-02-01T11:50:00"));
		booking.setExpiryTime(LocalDateTime.parse("2021-02-01T12:10:00"));
		booking.setBaseCurrency("GBP");
		booking.setCounterCurrency("USD");
		booking.setBaseCurrencyAmount(new BigDecimal(1000));
		booking.setBookingRef("BOOKING-REF-01");
		booking.setRate(1.3690754045);
		booking.setTradeAction(TradeAction.BUY);
		
		r2dbcTemplate.insert(booking)
		.as(StepVerifier::create)
		.expectNextCount(1)
		.verifyComplete();
		
		// verify repos method
		rateBookingRepo.findByBookingRef("BOOKING-REF-01")
		.as(StepVerifier::create)
		.expectNextMatches(item -> 
		item.getTimestamp().equals(booking.getTimestamp())
		&& item.getExpiryTime().equals(booking.getExpiryTime())
		&& item.getBaseCurrency().equals(booking.getBaseCurrency())
		&& item.getCounterCurrency().equals(booking.getCounterCurrency())
		&& item.getBaseCurrencyAmount().compareTo(booking.getBaseCurrencyAmount()) == 0
		&& item.getRate().compareTo(booking.getRate()) == 0
		)
		.verifyComplete();	
	}
	
	@DisplayName("find by booking ref - no record")
	@Test
	void findByBookingRef_noRecord() {

		rateBookingRepo.findByBookingRef("BOOKING-REF-02")
		.as(StepVerifier::create)		
		.verifyComplete();
		

	}
	
}
